// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PromiseDB = (function() {
    function PromiseDB(iDB) {
      this.iDB = iDB;
      this.close = __bind(this.close, this);
      this.transaction = __bind(this.transaction, this);
      this.deleteObjectStore = __bind(this.deleteObjectStore, this);
      this.createObjectStore = __bind(this.createObjectStore, this);
    }

    PromiseDB.open = function(name, version, upgradeCallback) {
      return new Promise(function(resolve, reject) {
        var request;
        if (version != null) {
          request = indexedDB.open(name, version);
        } else {
          request = indexedDB.open(name);
        }
        request.onerror = function() {
          return reject(Error(request.error));
        };
        request.onsuccess = function() {
          return resolve(new PromiseDB(request.result));
        };
        return request.onupgradeneeded = function() {
          return typeof upgradeCallback === "function" ? upgradeCallback(new PromiseDB(request.result)) : void 0;
        };
      });
    };

    PromiseDB["delete"] = function(name) {
      return new Promise(function(resolve, reject) {
        var request;
        request = indexedDB.deleteDatabase(name);
        request.onerror = function() {
          return reject(Error(request.error));
        };
        return request.onsuccess = function() {
          return resolve();
        };
      });
    };

    Object.defineProperties(PromiseDB.prototype, {
      version: {
        get: function() {
          return this.iDB.version;
        }
      },
      objectStoreNames: {
        get: function() {
          return this.iDB.objectStoreNames;
        }
      }
    });

    PromiseDB.prototype.createObjectStore = function(name, options) {
      return new PromiseDB.ObjectStore(this.iDB.createObjectStore(name, options));
    };

    PromiseDB.prototype.deleteObjectStore = function(name) {
      return new PromiseDB.ObjectStore(this.iDB.deleteObjectStore(name, options));
    };

    PromiseDB.prototype.transaction = function(objectStores, mode) {
      if (mode == null) {
        mode = 'readonly';
      }
      return new PromiseDB.Transaction(this.iDB.transaction(objectStores, mode));
    };

    PromiseDB.prototype.close = function() {
      return this.iDB.close();
    };

    return PromiseDB;

  })();

  this.PromiseDB.Transaction = (function() {
    function Transaction(iDBTransaction) {
      this.iDBTransaction = iDBTransaction;
      this.objectStore = __bind(this.objectStore, this);
    }

    Transaction.prototype.objectStore = function(name) {
      return new PromiseDB.ObjectStore(this.iDBTransaction.objectStore(name));
    };

    return Transaction;

  })();

  this.PromiseDB.Request = (function() {
    function Request(iDBRequest) {
      this.iDBRequest = iDBRequest;
    }

    return Request;

  })();

  this.PromiseDB.Index = (function() {
    function Index(iDBIndex) {
      this.iDBIndex = iDBIndex;
      this.count = __bind(this.count, this);
      this.getKey = __bind(this.getKey, this);
      this.get = __bind(this.get, this);
      this.openCursor = __bind(this.openCursor, this);
    }

    Index.prototype.openCursor = function(range, direction) {
      if (direction == null) {
        direction = 'next';
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBIndex.openCursor(range, direction);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    Index.prototype.openKeyCursor = function(range, direction) {
      if (direction == null) {
        direction = 'next';
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBIndex.openKeyCursor(range, direction);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    Index.prototype.get = function(key) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBIndex.get(key);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    Index.prototype.getKey = function(key) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBIndex.getKey(key);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    Index.prototype.count = function(key) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBIndex.getKey(key);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    return Index;

  })();

  this.PromiseDB.ObjectStore = (function() {
    function ObjectStore(iDBStore) {
      this.iDBStore = iDBStore;
      this.deleteIndex = __bind(this.deleteIndex, this);
      this.createIndex = __bind(this.createIndex, this);
      this.index = __bind(this.index, this);
      this.put = __bind(this.put, this);
      this.get = __bind(this.get, this);
      this["delete"] = __bind(this["delete"], this);
      this.clear = __bind(this.clear, this);
      this.add = __bind(this.add, this);
    }

    ObjectStore.prototype.add = function(obj, id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          if ((_this.iDBStore.keyPath != null) && (id != null)) {
            obj[key] = id;
          }
          request = _this.iDBStore.add(obj, id);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    ObjectStore.prototype.clear = function() {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBStore.clear();
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    ObjectStore.prototype["delete"] = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBStore["delete"](id);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    ObjectStore.prototype.get = function(id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          request = _this.iDBStore.get(id);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    ObjectStore.prototype.put = function(obj, id) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var request;
          if ((_this.iDBStore.keyPath != null) && (id != null)) {
            obj[key] = id;
          }
          request = _this.iDBStore.put(obj, id);
          request.onerror = function() {
            return reject(request.error);
          };
          return request.onsuccess = function() {
            return resolve(request.result);
          };
        };
      })(this));
    };

    ObjectStore.prototype.index = function(name) {
      return new PromiseDB.Index(this.iDBStore.index(name));
    };

    ObjectStore.prototype.createIndex = function(name, keyPath, options) {
      return new PromiseDB.Index(this.iDBStore.createIndex(name, keyPath, options));
    };

    ObjectStore.prototype.deleteIndex = function(name) {
      return this.iDBStore.deleteIndex(name);
    };

    return ObjectStore;

  })();

}).call(this);
